<?xml version="1.0"?>

<ruleset name="Clean Code Rules"
         xmlns="http://pmd.sf.net/ruleset/1.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://pmd.sf.net/ruleset/1.0.0 http://pmd.sf.net/ruleset_xml_schema.xsd"
         xsi:noNamespaceSchemaLocation="http://pmd.sf.net/ruleset_xml_schema.xsd">

    <description>
The Clean Code ruleset contains rules that enforce a clean code base. This includes rules from SOLID and object calisthenics.
    </description>

    <rule name="BooleanArgumentFlag"
          since="1.4.0"
          message="The method {0} has a boolean flag argument {1}, which is a certain sign of a Single Responsibility Principle violation."
          class="PHP_PMD_Rule_CleanCode_BooleanArgumentFlag"
          externalInfoUrl="http://phpmd.org/rules/design.html#booleanargumentflag">
        <description>
            <![CDATA[
A boolean flag argument is a reliable indicator for a violation of
the Single Responsibility Principle (SRP). You can fix this problem
by extracting the logic in the boolean flag into its own class
or method.
            ]]>
        </description>
        <priority>1</priority>
        <properties />
        <example>
            <![CDATA[
class Foo {
    public function bar($flag = true) {
    }
}
            ]]>
        </example>
    </rule>

    <rule name="ElseExpression"
          since="1.4.0"
          message="The method {0} uses an else expression. Else is never necessary and you can simplify the code to work without else."
          class="PHP_PMD_Rule_CleanCode_ElseExpression"
          externalInfoUrl="http://phpmd.org/rules/design.html#eleseexpression">
        <description>
            <![CDATA[
An if expression with an else branch is never necessary. You can rewrite the
conditions in a way that the else is not necessary and the code becomes simpler to read.
To achieve this use early exits or partition the method it several smaller methods.
            ]]>
        </description>
        <priority>1</priority>
        <properties></properties>
        <example>
            <![CDATA[
class Foo
{
    public function bar($flag)
    {
        if ($flag) {
            // one branch
        } else {
            // another branch
        }
    }
}
            ]]>
        </example>
    </rule>

    <rule name="StaticAccess"
          since="1.4.0"
          message="Avoid using static access to class '{0}' in method '{1}'."
          class="PHP_PMD_Rule_CleanCode_StaticAccess"
          externalInfoUrl="http://phpmd.org/rules/design.html#staticaccess">
        <description>
            <![CDATA[
Static acccess causes inexchangable dependencies to other classes and leads to hard to test code. Avoid
using static access at all costs and instead inject dependencies through the constructor. The only
case when static access is acceptable is when used for factory methods.
            ]]>
        </description>
        <priority>1</priority>
        <properties></properties>
        <example>
            <![CDATA[
class Foo
{
    public function bar()
    {
        Bar::baz();
    }
}
            ]]>
        </example>
    </rule>

    <rule name="NestedScopes"
          since="1.4.0"
          message="The method {0} uses a nested scope. Nested scopes increase complexity and should be extracted into their own mehtods."
          class="PHP_PMD_Rule_CleanCode_NestedScopes"
          externalInfoUrl="http://phpmd.org/rules/design.html#nestedscopes">
        <description>
            <![CDATA[
A nested scope is a loop in a loop, or an if-statement inside an if-statement. These blocks
of code are usually subject to increased complexity and make the code hard to read.
Consider extracting nested scopes into their own helper methods.
            ]]>
        </description>
        <priority>1</priority>
        <properties></properties>
        <example>
            <![CDATA[
class Foo
{
    public function bar($flag)
    {
        if ($flag) {
            if ($this->otherCondition($flag)) {
                // nested scope here
            }
        } else {
            // another branch
        }
    }
}
            ]]>
        </example>
    </rule>
</ruleset>
